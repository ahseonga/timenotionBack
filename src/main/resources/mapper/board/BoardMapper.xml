<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.geungeunhanjan.mapper.board.BoardMapper">

    <!-- 나의 일대기 게시판 정보 불러오기 -->
    <select id="selectBoard" resultType="BoardVO">
        SELECT *
        FROM GGHJ_BOARD
        WHERE USER_ID = #{userId}
    </select>

    <!--    내가 쓴 게시물의 상세페이지로 들어가기-->
    <select id="selectById" resultType="BoardVO">
        SELECT *
        FROM GGHJ_BOARD G
                 JOIN GGHJ_USER U
                      ON G.USER_ID = U.USER_ID
        WHERE G.BOARD_ID = #{boardId}
    </select>


    <!--    메인 화면 4개 게시글-->
    <select id="mainBoardbyViews" resultType="BoardMainDTO">
--         SELECT BOARD_ID,
--                BOARD_TITLE,
--                BOARD_CONTENT,
--                BOARD_CREATED_DATE,
--                BOARD_VIEW_COUNT,
--                BOARD_LIKE_COUNT,
--                BOARD_YEAR,
--                USER_ID
--         FROM GGHJ_BOARD
--         WHERE rownum BETWEEN 1 AND 4
--         ORDER BY BOARD_VIEW_COUNT DESC
            <![CDATA[
SELECT
    board_id,
    board_title,
    board_content,
    board_file_source_name,
    user_nickname,
    board_rank,
    MAX(uf.USER_FILE_PROFILE_SOURCE) AS USER_FILE_PROFILE_SOURCE,
    board_created_date, board_view_count
FROM (
         SELECT
             b.board_id,
             b.board_title,
             b.board_content,
             bf.board_file_source_name,
             COALESCE(u.user_nickname, k.name) AS user_nickname,
             DENSE_RANK() OVER (ORDER BY b.board_view_count DESC) AS board_rank,
                 b.board_created_date, b.board_view_count
         FROM
             gghj_board b
                 JOIN
             gghj_board_file bf ON b.board_id = bf.board_id
                 LEFT JOIN
             gghj_uni gu ON b.user_id = gu.user_id OR b.user_id = gu.kakao_id
                 LEFT JOIN
             gghj_user u ON gu.user_id = u.user_id
                 JOIN
             gghj_kakao k ON gu.kakao_id = k.kakao_id
     )
         LEFT JOIN
     GGHJ_USER_FILE uf ON uf.USER_ID = user_id
WHERE
    board_rank <= 4
GROUP BY
    board_id, board_title, board_content, board_file_source_name, user_nickname, board_rank, board_created_date, board_view_count
ORDER BY
    board_rank
        ]]>
    </select>

<!--    메인 배너 왼쪽 배너-->
    <select id="mainLeftBannerSelect" resultType="BoardMainDTO">
    <![CDATA[
        SELECT
            board_id,
            board_title,
            board_file_source_name,
            user_nickname,
            board_rank,
            MAX(uf.USER_FILE_PROFILE_SOURCE) AS USER_FILE_PROFILE_SOURCE
        FROM (
                 SELECT
                     b.board_id,
                     b.board_title,
                     bf.board_file_source_name,
                     COALESCE(u.user_nickname, k.name) AS user_nickname,
                     DENSE_RANK() OVER (ORDER BY b.board_view_count DESC) AS board_rank
                 FROM
                     gghj_board b
                         JOIN
                     gghj_board_file bf ON b.board_id = bf.board_id
                         LEFT JOIN
                     gghj_uni gu ON b.user_id = gu.user_id OR b.user_id = gu.kakao_id
                         LEFT JOIN
                     gghj_user u ON gu.user_id = u.user_id
                         JOIN
                     gghj_kakao k ON gu.kakao_id = k.kakao_id
             )
                 LEFT JOIN
             GGHJ_USER_FILE uf ON uf.USER_ID = user_id
        WHERE
            board_rank = 1
        GROUP BY
            board_id, board_title, board_file_source_name, user_nickname, board_rank
        ORDER BY
            board_rank
        ]]>
</select>

    <!--    메인 오른쪽 배너 2개-->
    <select id="mainRightBannerSelect" resultType="BoardMainDTO">
        <![CDATA[
        SELECT
            board_id,
            board_title,
            board_file_source_name,
            user_nickname,
            board_rank,
            MAX(uf.USER_FILE_PROFILE_SOURCE) AS USER_FILE_PROFILE_SOURCE
        FROM (
                 SELECT
                     b.board_id,
                     b.board_title,
                     bf.board_file_source_name,
                     COALESCE(u.user_nickname, k.name) AS user_nickname,
                     DENSE_RANK() OVER (ORDER BY b.board_view_count DESC) AS board_rank
                 FROM
                     gghj_board b
                         JOIN
                     gghj_board_file bf ON b.board_id = bf.board_id
                         LEFT JOIN
                     gghj_uni gu ON b.user_id = gu.user_id OR b.user_id = gu.kakao_id
                         LEFT JOIN
                     gghj_user u ON gu.user_id = u.user_id
                         JOIN
                     gghj_kakao k ON gu.kakao_id = k.kakao_id
             )
                 LEFT JOIN
             GGHJ_USER_FILE uf ON uf.USER_ID = user_id
        WHERE
            board_rank > 1 AND board_rank <= 3
        GROUP BY
            board_id, board_title, board_file_source_name, user_nickname, board_rank
        ORDER BY
            board_rank
        ]]>
    </select>

    <!-- 나의 일대기 게시판 데이터 입력하기 -->
    <insert id="insertBoard" parameterType="BoardVO">
        <selectKey keyProperty="boardId" resultType="Long" order="BEFORE">
            SELECT SEQ_BOARD.NEXTVAL FROM DUAL
        </selectKey>
        INSERT INTO GGHJ_BOARD (BOARD_ID, BOARD_TITLE, BOARD_CONTENT, BOARD_PUBLIC, BOARD_CREATED_DATE,
        BOARD_UPDATED_DATE, BOARD_VIEW_COUNT, BOARD_LIFE_CYCLE, BOARD_LIKE_COUNT, USER_ID, BOARD_YEAR)
        VALUES (#{boardId}, #{boardTitle}, #{boardContent}, #{boardPublic}, SYSDATE, SYSDATE,
        #{boardViewCount}, #{boardLifeCycle}, #{boardLikeCount}, #{userId}, #{boardYear})
    </insert>

    <!-- 게시판 작성자의 생일 가져오기  -->
    <select id="selectUserBirth" resultType="java.time.LocalDateTime">
        SELECT DISTINCT gu2.USER_BIRTH
        FROM GGHJ_BOARD gb
                 JOIN GGHJ_UNI GU
                      ON gb.USER_ID = gu.USER_ID
                 JOIN GGHJ_USER gu2 ON gu2.USER_ID = gu.USER_ID
        WHERE gu2.USER_ID = #{userId}
    </select>

    <!-- 나의 일대기 게시글 수정 -->
    <update id="updateBoard">
        UPDATE GGHJ_BOARD
        SET BOARD_TITLE        = #{boardTitle},
            BOARD_VIEW_COUNT   = #{boardViewCount},
            BOARD_CREATED_DATE = #{boardCreatedDate},
            BOARD_CONTENT      = #{boardContent}
        WHERE USER_ID = #{userId}
    </update>

    <!-- 나의 일대기 게시글 삭제 -->
    <delete id="deleteBoard">
        DELETE
        FROM GGHJ_BOARD
        WHERE USER_ID = #{userId}
    </delete>

    <!-- 마이 페이지 게시판 라이프 사이클 별 조회 -->
    <select id="selectBoardLifeCycle" resultType="BoardVO">
        SELECT BOARD_TITLE, BOARD_VIEW_COUNT, BOARD_CREATED_DATE, BOARD_CONTENT
        FROM GGHJ_BOARD
        WHERE BOARD_LIFE_CYCLE = #{boardLifeCycle}
    </select>

    <!--키워드 검색(안에 'a'는 임시값)-->
    <select id="selectByKeywordMain">
        SELECT BOARD_ID,
               BOARD_TITLE,
               BOARD_CONTENT,
               BOARD_PUBLIC,
               BOARD_CREATED_DATE,
               BOARD_UPDATED_DATE,
               BOARD_VIEW_COUNT,
               BOARD_LIFE_CYCLE,
               BOARD_LIKE_COUNT,
               BOARD_YEAR,
               USER_ID
        FROM GGHJ_BOARD
        WHERE BOARD_TITLE LIKE '%a%'
           OR BOARD_CONTENT LIKE '%a%'
        ORDER BY BOARD_CREATED_DATE DESC
    </select>

</mapper>
