
-- 게시판, 유저의 닉네임, 유저 프로필사진 게시판 번호 UNI_ID 

SELECT * FROM GGHJ_BOARD B 
JOIN GGHJ_UNI UNI ON B.USER_ID = UNI.UNI_ID 
FULL OUTER JOIN GGHJ_USER U ON UNI.USER_ID = U.USER_ID 
FULL OUTER JOIN GGHJ_KAKAO K ON UNI.KAKAO_ID = K.KAKAO_ID
FULL OUTER JOIN GGHJ_USER_FILE F ON UNI.USER_ID = UNI.UNI_ID 

------------------

	



SELECT * FROM GGHJ_BOARD B 
JOIN GGHJ_UNI UNI ON B.USER_ID = UNI.UNI_ID 

SELECT * FROM GGHJ_USER_FILE guf ;
SELECT * FROM GGHJ_UNI;
SELECT * FROM GGHJ_USER_FILE;

SELECT * FROM GGHJ_BOARD;

BEGIN
    -- 지젤
    INSERT INTO GGHJ_USER (USER_ID, USER_NAME, USER_PASSWORD, USER_EMAIL, USER_NICKNAME, USER_BIRTH) 
    VALUES (SEQ_USER.NEXTVAL, '지젤', '1234', 'giselle@naver.com', '지젤', SYSDATE);

    -- 윈터
    INSERT INTO GGHJ_USER (USER_ID, USER_NAME, USER_PASSWORD, USER_EMAIL, USER_NICKNAME, USER_BIRTH) 
    VALUES (SEQ_USER.NEXTVAL, '윈터', '1234', 'winter@naver.com', '윈터', SYSDATE);

    -- 카리나
    INSERT INTO GGHJ_USER (USER_ID, USER_NAME, USER_PASSWORD, USER_EMAIL, USER_NICKNAME, USER_BIRTH) 
    VALUES (SEQ_USER.NEXTVAL, '카리나', '1234', 'karina@naver.com', '카리나', SYSDATE);

    -- 닝닝
    INSERT INTO GGHJ_USER (USER_ID, USER_NAME, USER_PASSWORD, USER_EMAIL, USER_NICKNAME, USER_BIRTH) 
    VALUES (SEQ_USER.NEXTVAL, '닝닝', '1234', 'ningning@naver.com', '닝닝', SYSDATE);

    -- 이서
    INSERT INTO GGHJ_KAKAO (KAKAO_ID, KAKAO_PASSWORD, KAKAO_EMAIL, KAKAO_NICKNAME, KAKAO_BIRTH) 
    VALUES (SEQ_KAKAO.NEXTVAL, '', 'yiseo@naver.com', '이서', SYSDATE);

    -- 조이
    INSERT INTO GGHJ_KAKAO (KAKAO_ID, KAKAO_PASSWORD, KAKAO_EMAIL, KAKAO_NICKNAME, KAKAO_BIRTH) 
    VALUES (SEQ_KAKAO.NEXTVAL, '', 'joy@naver.com', '조이', SYSDATE);

    -- 아이린
    INSERT INTO GGHJ_KAKAO (KAKAO_ID, KAKAO_PASSWORD, KAKAO_EMAIL, KAKAO_NICKNAME, KAKAO_BIRTH) 
    VALUES (SEQ_KAKAO.NEXTVAL, '', 'irene@naver.com', '아이린', SYSDATE);

    -- 웬디
    INSERT INTO GGHJ_KAKAO (KAKAO_ID, KAKAO_PASSWORD, KAKAO_EMAIL, KAKAO_NICKNAME, KAKAO_BIRTH) 
    VALUES (SEQ_KAKAO.NEXTVAL, '', 'wendy@naver.com', '웬디', SYSDATE);

    -- 예리
    INSERT INTO GGHJ_KAKAO (KAKAO_ID, KAKAO_PASSWORD, KAKAO_EMAIL, KAKAO_NICKNAME, KAKAO_BIRTH) 
    VALUES (SEQ_KAKAO.NEXTVAL, '', 'yeri@naver.com', '예리', SYSDATE);

    -- 슬기
    INSERT INTO GGHJ_KAKAO (KAKAO_ID, KAKAO_PASSWORD, KAKAO_EMAIL, KAKAO_NICKNAME, KAKAO_BIRTH) 
    VALUES (SEQ_KAKAO.NEXTVAL, '', 'seulgi@naver.com', '슬기', SYSDATE);
   
END;

 BEGIN
    -- 이서
    INSERT INTO GGHJ_UNI (UNI_ID, UNI_STATUS, UNI_ABOUT, USER_ID, KAKAO_ID) 
    VALUES (SEQ_UNI.NEXTVAL, '일반', '', (SELECT USER_ID FROM GGHJ_USER WHERE USER_EMAIL = 'yiseo@naver.com'), 
                                     (SELECT KAKAO_ID FROM GGHJ_KAKAO WHERE KAKAO_EMAIL = 'yiseo@naver.com'));

    -- 조이
    INSERT INTO GGHJ_UNI (UNI_ID, UNI_STATUS, UNI_ABOUT, USER_ID, KAKAO_ID) 
    VALUES (SEQ_UNI.NEXTVAL, '일반', '', (SELECT USER_ID FROM GGHJ_USER WHERE USER_EMAIL = 'joy@naver.com'), 
                                     (SELECT KAKAO_ID FROM GGHJ_KAKAO WHERE KAKAO_EMAIL = 'joy@naver.com'));

    -- 아이린
    INSERT INTO GGHJ_UNI (UNI_ID, UNI_STATUS, UNI_ABOUT, USER_ID, KAKAO_ID) 
    VALUES (SEQ_UNI.NEXTVAL, '일반', '', (SELECT USER_ID FROM GGHJ_USER WHERE USER_EMAIL = 'irene@naver.com'), 
                                     (SELECT KAKAO_ID FROM GGHJ_KAKAO WHERE KAKAO_EMAIL = 'irene@naver.com'));

    -- 웬디
    INSERT INTO GGHJ_UNI (UNI_ID, UNI_STATUS, UNI_ABOUT, USER_ID, KAKAO_ID) 
    VALUES (SEQ_UNI.NEXTVAL, '일반', '', (SELECT USER_ID FROM GGHJ_USER WHERE USER_EMAIL = 'wendy@naver.com'), 
                                     (SELECT KAKAO_ID FROM GGHJ_KAKAO WHERE KAKAO_EMAIL = 'wendy@naver.com'));

    -- 예리
    INSERT INTO GGHJ_UNI (UNI_ID, UNI_STATUS, UNI_ABOUT, USER_ID, KAKAO_ID) 
    VALUES (SEQ_UNI.NEXTVAL, '일반', '', (SELECT USER_ID FROM GGHJ_USER WHERE USER_EMAIL = 'yeri@naver.com'), 
                                     (SELECT KAKAO_ID FROM GGHJ_KAKAO WHERE KAKAO_EMAIL = 'yeri@naver.com'));

    -- 슬기
    INSERT INTO GGHJ_UNI (UNI_ID, UNI_STATUS, UNI_ABOUT, USER_ID, KAKAO_ID) 
    VALUES (SEQ_UNI.NEXTVAL, '일반', '', (SELECT USER_ID FROM GGHJ_USER WHERE USER_EMAIL = 'seulgi@naver.com'), 
                                     (SELECT KAKAO_ID FROM GGHJ_KAKAO WHERE KAKAO_EMAIL = 'seulgi@naver.com'));

    -- 카리나
    INSERT INTO GGHJ_UNI (UNI_ID, UNI_STATUS, UNI_ABOUT, USER_ID, KAKAO_ID) 
    VALUES (SEQ_UNI.NEXTVAL, '일반', '', (SELECT USER_ID FROM GGHJ_USER WHERE USER_EMAIL = 'karina@naver.com'), 
                                     NULL);

    -- 윈터
    INSERT INTO GGHJ_UNI (UNI_ID, UNI_STATUS, UNI_ABOUT, USER_ID, KAKAO_ID) 
    VALUES (SEQ_UNI.NEXTVAL, '일반', '', (SELECT USER_ID FROM GGHJ_USER WHERE USER_EMAIL = 'winter@naver.com'), 
                                     NULL);

    -- 닝닝
    INSERT INTO GGHJ_UNI (UNI_ID, UNI_STATUS, UNI_ABOUT, USER_ID, KAKAO_ID) 
    VALUES (SEQ_UNI.NEXTVAL, '일반', '', (SELECT USER_ID FROM GGHJ_USER WHERE USER_EMAIL = 'ningning@naver.com'), 
                                     NULL);

    -- 지젤
    INSERT INTO GGHJ_UNI (UNI_ID, UNI_STATUS, UNI_ABOUT, USER_ID, KAKAO_ID) 
    VALUES (SEQ_UNI.NEXTVAL, '일반', '', (SELECT USER_ID FROM GGHJ_USER WHERE USER_EMAIL = 'giselle@naver.com'), 
                                     NULL);
END;


SELECT * FROM GGHJ_BOARD;

SELECT * FROM GGHJ_KAKAO;
SELECT * FROM GGHJ_UNI;
SELECT * FROM GGHJ_USER;

INSERT INTO GGHJ_BOARD (BOARD_ID, BOARD_TITLE, BOARD_CONTENT, BOARD_PUBLIC, BOARD_CREATED_DATE, BOARD_UPDATED_DATE, BOARD_VIEW_COUNT, BOARD_LIFE_CYCLE, BOARD_LIKE_COUNT, BOARD_YEAR, USER_ID)
VALUES (1, 'My First Post', 'This is the content of my first post.', 'O', SYSDATE, SYSDATE, 0, '청소년기', 0, 2024, 1);

INSERT INTO GGHJ_BOARD (BOARD_ID, BOARD_TITLE, BOARD_CONTENT, BOARD_PUBLIC, BOARD_CREATED_DATE, BOARD_UPDATED_DATE, BOARD_VIEW_COUNT, BOARD_LIFE_CYCLE, BOARD_LIKE_COUNT, BOARD_YEAR, USER_ID)
VALUES (2, 'A Day in the Life', 'Today I want to share what a typical day looks like for me.', 'X', SYSDATE, SYSDATE, 0, '청소년기', 1, 2024, 2);

INSERT INTO GGHJ_BOARD (BOARD_ID, BOARD_TITLE, BOARD_CONTENT, BOARD_PUBLIC, BOARD_CREATED_DATE, BOARD_UPDATED_DATE, BOARD_VIEW_COUNT, BOARD_LIFE_CYCLE, BOARD_LIKE_COUNT, BOARD_YEAR, USER_ID)
VALUES (3, 'Reflections', 'Reflecting on the past few years and what I have learned.', 'O', SYSDATE, SYSDATE, 2, '청년기', 0, 2024, 1);

INSERT INTO GGHJ_BOARD (BOARD_ID, BOARD_TITLE, BOARD_CONTENT, BOARD_PUBLIC, BOARD_CREATED_DATE, BOARD_UPDATED_DATE, BOARD_VIEW_COUNT, BOARD_LIFE_CYCLE, BOARD_LIKE_COUNT, BOARD_YEAR, USER_ID)
VALUES (4, 'Travel Diaries', 'Sharing my travel experiences and adventures.', 'O', SYSDATE, SYSDATE, 0, '중년기', 0, 2024, 4);

INSERT INTO GGHJ_BOARD (BOARD_ID, BOARD_TITLE, BOARD_CONTENT, BOARD_PUBLIC, BOARD_CREATED_DATE, BOARD_UPDATED_DATE, BOARD_VIEW_COUNT, BOARD_LIFE_CYCLE, BOARD_LIKE_COUNT, BOARD_YEAR, USER_ID)
VALUES (5, 'Family Memories', 'Cherishing the moments spent with family.', 'X', SYSDATE, SYSDATE, 0, '노년기', 0, 2024, 5);



SELECT BOARD_ID, BOARD_TITLE, BOARD_CONTENT, BOARD_CREATED_DATE, BOARD_UPDATED_DATE, BOARD_VIEW_COUNT, BOARD_LIFE_CYCLE, BOARD_YEAR, USER_ID
	FROM ( SELECT ROWNUM AS RNUM, BOARD_ID, BOARD_TITLE, BOARD_CONTENT, BOARD_CREATED_DATE, BOARD_VIEW_COUNT, BOARD_LIKE_COUNT, BOARD_YEAR, USER_ID
	FROM ( SELECT B.BOARD_ID, BOARD_TITLE, U.)

게시글제목
조회수 닉네임 프사
컨텐츠

SELECT * FROM GGHJ_BOARD B
JOIN GGHJ_USER U ON B.USER_ID =U.USER_ID;


SELECT * FROM GGHJ_USER_FILE;

 -- ===== FOR1
 -- 게시글아이디, 유저아이디, 제목, 내용, 닉네임, 프로필 파일 3개 , 조회수
 SELECT 
    B.USER_ID,
    B.BOARD_ID,
    B.BOARD_TITLE,
    COALESCE (U.USER_NICKNAME, K.KAKAO_NICKNAME) NICKNAME,
    F.USER_FILE_PROFILE_NAME,
    F.USER_FILE_PROFILE_SOURCE,
    F.USER_FILE_PROFILE_UUID,
    B.BOARD_CONTENT,
    B.BOARD_VIEW_COUNT
FROM 
    GGHJ_BOARD B
JOIN 
    GGHJ_UNI UNI ON B.USER_ID = UNI.UNI_ID
LEFT JOIN 
    GGHJ_USER U ON UNI.USER_ID = U.USER_ID
LEFT JOIN 
    GGHJ_KAKAO K ON UNI.KAKAO_ID = K.KAKAO_ID
LEFT JOIN 
    GGHJ_USER_FILE F ON U.USER_ID = F.USER_ID
ORDER BY 
    B.BOARD_ID;

	   
   -- ===== FOR 2
  --  유저아이디 닉네임 / 프로필 사진 FILE 가져오는 것 
  SELECT BOARD_ID, BOARD_TITLE, BOARD_CONTENT, BOARD_PUBLIC, BOARD_VIEW_COUNT FROM GGHJ_BOARD WHERE USER_ID = 7;
   -- 게시글아이디 제목  내용 공개여부 조회수 
  SELECT UNI.UNI_ID, COALESCE(K.KAKAO_NICKNAME, U.USER_NICKNAME) NICKNAME,F.USER_FILE_ID, F.USER_FILE_PROFILE_NAME, F.USER_FILE_PROFILE_SOURCE, F.USER_FILE_PROFILE_UUID
  FROM GGHJ_UNI UNI 
  FULL OUTER JOIN GGHJ_USER U ON UNI.UNI_ID= U.USER_ID 
  FULL OUTER JOIN GGHJ_KAKAO K ON UNI.KAKAO_ID = K.KAKAO_ID 
  FULL OUTER JOIN GGHJ_USER_FILE F ON F.USER_ID = UNI.UNI_ID
  WHERE UNI.UNI_ID = 7;
 
 
 
<SELECT
SELECT COUNT(*) AS "COUNT"
FROM GGHJ_BOARD
WHERE BOARD_LIFE_CYCLE = #{boardLifeCycle}






 -- 모두의 일대기 게시판 페이징 처리 --
 /*   <select id="everyLifeagepaging" resultType="BoardVO">
    <![CDATA[*/

   
   
SELECT BOARD_TITLE, BOARD_CREATED_DATE, BOARD_VIEW_COUNT, BOARD_CONTENT,
       NICKNAME, USER_FILE_PROFILE_NAME, USER_FILE_PROFILE_SOURCE, USER_FILE_PROFILE_UUID,
       BOARD_ID, USER_ID
FROM (
    SELECT RNUM, BOARD_TITLE, BOARD_CREATED_DATE, BOARD_VIEW_COUNT, BOARD_CONTENT,
           NICKNAME, USER_FILE_PROFILE_NAME, USER_FILE_PROFILE_SOURCE, USER_FILE_PROFILE_UUID,
           BOARD_ID, USER_ID
    FROM (
        SELECT ROWNUM AS RNUM, BOARD_TITLE, BOARD_CREATED_DATE, BOARD_VIEW_COUNT, BOARD_CONTENT,
               NICKNAME, USER_FILE_PROFILE_NAME, USER_FILE_PROFILE_SOURCE, USER_FILE_PROFILE_UUID,
               BOARD_ID, USER_ID
        FROM (
            SELECT BOARD_TITLE, BOARD_CREATED_DATE, BOARD_VIEW_COUNT, BOARD_CONTENT,
                   COALESCE(U.USER_NICKNAME, K.KAKAO_NICKNAME) AS NICKNAME,
                   F.USER_FILE_PROFILE_NAME,
                   F.USER_FILE_PROFILE_SOURCE,
                   F.USER_FILE_PROFILE_UUID,
                   B.BOARD_ID,
                   B.USER_ID
            FROM GGHJ_BOARD B
            JOIN GGHJ_UNI UNI ON B.USER_ID = UNI.UNI_ID
            LEFT JOIN GGHJ_USER U ON UNI.USER_ID = U.USER_ID
            LEFT JOIN GGHJ_KAKAO K ON UNI.KAKAO_ID = K.KAKAO_ID
            LEFT JOIN GGHJ_USER_FILE F ON U.USER_ID = F.USER_ID
            WHERE B.BOARD_LIFE_CYCLE = #{boardLifeCycle}
        )
        WHERE ROWNUM <= #{criteria.page} * #{criteria.amount}
    )
    WHERE RNUM > (#{criteria.page} - 1) * #{criteria.amount}
);


/*        )
        WHERE ROWNUM <= #{criteria.page} * #{criteria.amount}
    )
    WHERE RNUM > (#{criteria.page} - 1) * #{criteria.amount}*/
/*    ]]>
</select>*/
           
           
 -- 유아기, 유년기, 아동기, 청소년기, 성인, 중년, 노년 클릭 시 게시판 정렬 --
    <select id="everyLifeagepaging" resultType="BoardVO">
           	SELECT COUNT(*) AS "COUNT"
			FROM GGHJ_BOARD
			WHERE BOARD_LIFE_CYCLE = #{boardLifeCycle}
			
			
			
			
           
 




 
 
 
 
 
 
 
 
 
 
 

	

