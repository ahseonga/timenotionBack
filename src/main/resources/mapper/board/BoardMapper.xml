<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.geungeunhanjan.mapper.board.BoardMapper">

    <!-- 나의 일대기 게시판 정보 불러오기 -->
    <select id="selectBoard" resultType="BoardVO">
        SELECT *
        FROM GGHJ_BOARD
        WHERE USER_ID = #{userId}
    </select>

<!--    내가 쓴 게시물의 상세페이지로 들어가기-->
    <select id="selectById" resultType="BoardVO">
        SELECT *
        FROM GGHJ_BOARD G
                 JOIN GGHJ_USER U
                      ON G.USER_ID = U.USER_ID
        WHERE G.BOARD_ID = #{boardId}
    </select>


    <!--    메인 화면 4개 게시글-->
    <select id="mainBoardbyViews" resultType="BoardVO">
        SELECT BOARD_ID,
               BOARD_TITLE,
               BOARD_CONTENT,
               BOARD_CREATED_DATE,
               BOARD_VIEW_COUNT,
               BOARD_LIKE_COUNT,
               BOARD_YEAR,
               USER_ID
        FROM GGHJ_BOARD
        WHERE rownum BETWEEN 1 AND 4
        ORDER BY BOARD_VIEW_COUNT DESC
    </select>

    <!-- 나의 일대기 게시판 데이터 입력하기 -->
    <insert id="insertBoard" parameterType="BoardVO">
        <selectKey keyProperty="boardId" resultType="Long" order="BEFORE">
            SELECT SEQ_BOARD.NEXTVAL FROM DUAL
        </selectKey>
        INSERT INTO GGHJ_BOARD (BOARD_ID, BOARD_TITLE, BOARD_CONTENT, BOARD_PUBLIC, BOARD_CREATED_DATE,
        BOARD_UPDATED_DATE, BOARD_VIEW_COUNT, BOARD_LIFE_CYCLE, BOARD_LIKE_COUNT, USER_ID, BOARD_YEAR)
        VALUES (#{boardId}, #{boardTitle}, #{boardContent}, #{boardPublic}, SYSDATE, SYSDATE,
        #{boardViewCount}, #{boardLifeCycle}, #{boardLikeCount}, #{userId}, #{boardYear})
    </insert>

    <!-- 게시판 작성자의 생일 가져오기  -->
    <select id="selectUserBirth" resultType="java.time.LocalDateTime">
        SELECT DISTINCT gu2.USER_BIRTH
        FROM GGHJ_BOARD gb
                 JOIN GGHJ_UNI GU
                      ON gb.USER_ID = gu.USER_ID
                 JOIN GGHJ_USER gu2 ON gu2.USER_ID = gu.USER_ID
        WHERE gu2.USER_ID = #{userId}
    </select>

    <!-- 나의 일대기 게시글 수정 -->
    <update id="updateBoard">
        UPDATE GGHJ_BOARD
        SET BOARD_TITLE        = #{boardTitle},
            BOARD_VIEW_COUNT   = #{boardViewCount},
            BOARD_CREATED_DATE = #{boardCreatedDate},
            BOARD_CONTENT      = #{boardContent}
        WHERE USER_ID = #{userId}
    </update>

    <!-- 나의 일대기 게시글 삭제 -->
    <delete id="deleteBoard">
        DELETE
        FROM GGHJ_BOARD
        WHERE USER_ID = #{userId}
    </delete>

    <!-- 마이 페이지 게시판 라이프 사이클 별 조회 -->
    <select id="selectBoardLifeCycle" resultType="BoardVO">
        SELECT BOARD_TITLE, BOARD_VIEW_COUNT, BOARD_CREATED_DATE, BOARD_CONTENT
        FROM GGHJ_BOARD
        WHERE BOARD_LIFE_CYCLE = #{boardLifeCycle}
    </select>

    <!--키워드 검색(안에 'a'는 임시값)-->
    <select id="selectByKeywordMain">
        SELECT BOARD_ID,
               BOARD_TITLE,
               BOARD_CONTENT,
               BOARD_PUBLIC,
               BOARD_CREATED_DATE,
               BOARD_UPDATED_DATE,
               BOARD_VIEW_COUNT,
               BOARD_LIFE_CYCLE,
               BOARD_LIKE_COUNT,
               BOARD_YEAR,
               USER_ID
        FROM GGHJ_BOARD
        WHERE BOARD_TITLE LIKE '%a%'
           OR BOARD_CONTENT LIKE '%a%'
        ORDER BY BOARD_CREATED_DATE DESC
    </select>

    <!-- 모두의 일대기 게시글 -->
    <select id="everyLifeBoardbyViews" resultType="BoardVO">
        SELECT BOARD_ID, BOARD_TITLE, BOARD_CONTENT, BOARD_CREATED_DATE, BOARD_VIEW_COUNT, BOARD_LIKE_COUNT, BOARD_YEAR, USER_ID
        FROM GGHJ_BOARD
        WHERE rownum BETWEEN 1 AND 100
        ORDER BY BOARD_VIEW_COUNT DESC
    </select>

 <!--   <select id="selectAllPage" parameterType="Criteria" resultType="BoardListDto">
        <![CDATA[
        SELECT BOARD_ID, BOARD_TITLE, BOARD_CONTENT, BOARD_CREATED_DATE, BOARD_VIEW_COUNT, BOARD_LIKE_COUNT, BOARD_YEAR, USER_ID
        FROM (
                 SELECT ROWNUM AS RNUM, BOARD_ID, BOARD_TITLE, BOARD_CONTENT, BOARD_CREATED_DATE, BOARD_VIEW_COUNT, BOARD_LIKE_COUNT, BOARD_YEAR, USER_ID
                 FROM (
                          SELECT B.BOARD_ID, B.BOARD_TITLE, B.BOARD_CONTENT, B.BOARD_CREATED_DATE, B.BOARD_VIEW_COUNT, B.BOARD_LIKE_COUNT, B.BOARD_YEAR, U.LOGIN_ID AS USER_ID,
                                 F.FILE_ID, F.NAME, F.UPLOAD_PATH, F.UUID
                          FROM TBL_BOARD B
                                   JOIN TBL_USER U ON B.USER_ID = U.USER_ID
                                   LEFT JOIN (
                              SELECT FILE_ID, NAME, UPLOAD_PATH, UUID, BOARD_ID
                              FROM (
                                       SELECT FILE_ID, NAME, UPLOAD_PATH, UUID, BOARD_ID,
                                              RANK() OVER(PARTITION BY BOARD_ID ORDER BY FILE_ID) AS RK
                                       FROM TBL_FILE
                                   )
                              WHERE RK = 1
                          ) F ON B.BOARD_ID = F.BOARD_ID
                          ORDER BY B.BOARD_ID DESC
                      )
                 WHERE ROWNUM <= #{page} * #{amount}
             )
        WHERE RNUM > (#{page} - 1) * #{amount}
        ]]>
    </select>-->










<!--    <select id="selectView" resultType="ViewDTO">-->
<!--        SELECT-->
<!--        u.USER_NICKNAME, b.BOARD_TITLE, b.BOARD_CREATED_DATE, b.BOARD_LIKE_COUNT, b.BOARD_VIEW_COUNT-->
<!--        FROM-->
<!--        GGHJ_BOARD b JOIN GGHJ_USER u-->
<!--        ON u.user_id = b.USER_ID-->
<!--        <choose>-->
<!--            <when test="sortType == 'latest'">-->
<!--                ORDER BY b.BOARD_CREATED_DATE DESC-->
<!--            </when>-->
<!--            <when test="sortType == 'popularity'">-->
<!--                ORDER BY b.BOARD_LIKE_COUNT DESC-->
<!--            </when>-->
<!--            <when test="sortType == 'views'">-->
<!--                ORDER BY b.BOARD_VIEW_COUNT DESC-->
<!--            </when>-->
<!--            <otherwise>-->
<!--                ORDER BY b.BOARD_CREATED_DATE DESC-->
<!--            </otherwise>-->
<!--        </choose>-->

<!--    </select>-->

</mapper>
